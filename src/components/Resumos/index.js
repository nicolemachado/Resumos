import React from 'react'
import './style.css'

function ResumosJS() {
  return (
    <div className="container">
      <h1 className="text">üíõ JavaScript</h1>
      <p className="p1">
          <ul>
            Vari√°veis e Tipos de Dados <br /><br />
            <li>String</li>
            Letras<br /><br />
            <li>Number</li>
            N√∫meros<br /><br />
            <li>Boolen</li>
            Verdadeiro ou Falso<br /><br />
            <li>Null</li>
            Nulo <br /><br />
            <li>Undefined</li>
            Indefinido<br /><br />
            <li>Object {'{}'}</li>
            <li>Array {'[]'}</li>
          </ul>
      </p>
      <h2 className="text2" >‚û™ Operadores Atirm√©ticos </h2>
      <p className="p2">
        Adi√ß√£o <br /> Subtra√ß√£o <br /> Multiplica√ß√£o <br /> Divis√£o <br />
        <br />
        Abreviados: <br />
        var ++ = acrescenta +1 <br />
        var -- = diminui -1 <br />
        var += = adiciona um valor na var definida <br />
        var -= = diminui um valor na var definida <br />
        var *= = multiplica um valor na var definida <br />
        var /= = divide um valor na var definida
      </p>

      <h2 className="text2" >‚û™ Operadores de Igualdade/Relacionais </h2>
      <p  className="p2">
        == igual a <br />
        != diferente de <br />
        === igual a e do mesmo tipo <br />
        !== dferente de mas do mesmo tipo <br />
        {'>'} maior que <br />
        {'<'} menor que <br />
        {'>='} maior ou igual a<br />
        {'<='} menor ou igual a

      </p> 
      
      <h2 className="text2" >‚û™ Operadores L√≥gicos </h2>
      <p className="p2">
      || = ou/or  <br />
      && = e/and <br />
      ! = n√£o/not
      </p> 

      <h2 className="text2" >‚û™ Fun√ß√µes </h2>
      <p className="p2">
      Fun√ß√µes s√£o blocos de c√≥digos que trazem instru√ß√µes para o JS. <br />
      Pode ou n√£o retornar algo. <br />
      Os par√™nteses {'()'} indicam que √© uma fun√ß√£o, eles recebem os argumenos {'(que devem ser separados por v√≠rgula)'}. <br />
      As chaves {'{}'} √© onde fica o corpo da fun√ß√£o.<br />
      Ela precisa ser definida com um nome, e depois tem que ser chamada.
      </p> 

      <h2 className="text2" >‚û™ Operadores Un√°rios </h2>
      <p className="p2">
      O operador un√°rio tenta converter o n√∫mero. Concatenar valores.<br />
      De string para number<br />
      o - converte para negativoconverte um operando em um n√∫mero e nega o valor depois dele.<br />
      o + converte um operando em um n√∫mero.<br />   
      </p> 

      <h2 className="text2" >‚û™ Estrutura L√©xica </h2>
      <p className="p2">
        √â a estrutura da sintaxe do JS, ou seja, como ele deve ser escrito.<br />
        Ele √© case sensitive, uma letra ma√≠scula √© diferente de uma min√∫scula. <br />
        {'/**/'} = coment√°rio em bloco.<br />
        {'//'} = coment√°rio em linha.<br />
        Existem palavras reservadas do JS que n√£o podem ser usadas como fun√ß√µes! {'(√â bom pesquisar sobre isso, no site MDN Web Docs - Mozilla)'}.
      </p> 

      <h2 className="text2" >‚û™ Instru√ß√µes Condicionais </h2>
      <p className="p2">
      Testar valor ou condi√ß√£o para relizar uma a√ß√£o {'(conte√∫do)'}, reescrever vari√°veis, etc.<br />
      Tomar decis√µes no JS.<br />
      if = se <br />
      else = caso contr√°rio <br />
      else if = controlar 2 condi√ß√µes.  
      </p> 

      <h2 className="text2" >‚û™ Tipos Primitivos  Objetos </h2>
      <p className="p2">
      Objetos:<br />
      Primitivos: number, string, boolean, null, undefined.<br />
      Uma vari√°vel pode ser uma fun√ß√£o.
      </p> 

      <h2 className="text2" >‚û™ M√©todo de Objeto </h2>
      <p className="p2">
      O m√©todo √© atribuido a um objeto.  
      </p> 

      <h2 className="text2" >‚û™ Truthy e Falsy </h2>
      <p className="p2">
      Um valor truthy √© um valor que se traduz em verdadeiro quando avaliado em um contexto Booleano.<br /> Todos os valores s√£o truthy a menos que eles sejam definidos como falsy<br />
      Falsy:<br />
      - Undefined<br />
      - Null<br />
      - NaN<br />
      - 0<br />
      = -0<br />
      - ' ' ou " "
      </p> 

      <h2 className="text2" >‚û™ Operador Condicional Tern√°rio </h2>
      <p className="p2">
      √â uma forma de fazer testes sem precisar de instrui√ß√µes condicionais. <br />
      Substituir um if/else, deixando o c√≥digo mais curto.<br />
      Uma express√£o √© avaliada como true ou false.<br />
      Sintaxe: condition ? expr1 : expr2.<br />
      As express√µes podem ser de qualquer tipo.
      </p> 

      <h2 className="text2" >‚û™ Escopo de Vari√°veis e Fun√ß√µes </h2>
      <p className="p2">
      Vari√°vel Local/Bloco:<br />
      Pode ser usada/invocada somente no local onde foi criada. N√£o funciona no console.log<br /><br />
      Vari√°vel Global:<br />
      Pode ser usada/invocada em qualquer lugar do c√≥digo. Funciona no console.log<br /><br />
      Argumentos de fun√ß√µes:<br />
      S√£o de escopos de bloco, s√≥ existem dentro da fun√ß√£o.
      </p> 

      <h2 className="text2" >‚û™ Retorno de Fun√ß√µes com Arrays e Objetos </h2>
      <p className="p2">
      Objetos {'{}'}<br />
      Arrays {'[]'}<br />
      Retornos de fun√ß√µes podem ser de qualquer tipo de dado no JS.<br />
      Uma vez por fun√ß√£o.  
      </p> 

      <h2 className="text2" >‚û™ Par√¢metros de Fun√ß√µes como Arrays e Objetos </h2>
      <p className="p2">
      O objeto se "chama" com . ap√≥s o nome {'(na invoca√ß√£o)'} ou na fun√ß√£o.<br />
      Array se chama com {'[]'} na invoca√ß√£o ou na fun√ß√£o.
      </p> 

      <h2 className="text2" >‚û™ Operador v√≠rgula e Estrutura Condicional Switch </h2>
      <p className="p2">
      Vari√°veis seguidas de v√≠rgula s√£o globais, mesma coisa que escrever v√°rias var s√≥ que em uma linha apenas.<br />
      O outro jeito √© mais aconselh√°vel, mesmo que esse seja bem comum em c√≥digos.
      <br /><br />
      Switch = tamb√©m consegue declarar condicionais. √â tipo um loop com else if.<br />
      Testes condicionais com qualquer tipo de valor {'(str, nmbr, boolean, etc...)'}<br />
      case = compara <br />
      break = para a compara√ß√£o<br />
      </p> 

      <h2 className="text2" >‚û™ Estrutura de Repeti√ß√£o While </h2>
      <p className="p2">
      Testa se um valor √© verdadeiro e vai executar a fun√ß√£o enquanto um valor for false.
      </p> 

      <h2 className="text2" >‚û™ Operadore M√≥dulo </h2>
      <p className="p2">
      Ele d√° o resto da divis√£o no JS<br />
      Por exemplo, se faz uma divis√£o, e o restinho √© o operador m√≥dulo<br />
      Seus resultados s√£o os mesmos apenas para um dividendo positivo, mas se tivermos um dividendo negativo a e um operador de <br /> m√≥dulo for aplicado sobre ele, os resultados ser√£o completamente diferentes.
      </p> 

      <h2 className="text2" >‚û™ Array e Propriedade Length </h2>
      <p className="p2">
      Arrays s√£o "listas de objetos" com m√©todos para realizar opera√ß√µes.<br />
      A propriedade length √© o comprimento, a quantidade de itens/propriedades que h√° dentro do array.
      </p> 

      <h2 className="text2" >‚û™ M√©todo push e Loop for </h2>
      <p className="p2">
      push {'()'} = empurra/acrescenta coisas no array<br />
      2 formas:<br />
      - sobrescrevendo o array<br />
      - push no array<br />
      for = tudo que o while faz, s√≥ que de uma vez s√≥.
      </p> 

      <h2 className="text2" >‚û™ Fun√ß√µes Auto-Execut√°veis </h2>
      <p className="p2">
      S√£o fun√ß√µes que o nome j√° diz, auto-execut√°veis. Ajudam muito em arquivos globais, para n√£o poluir o c√≥digo.  
      </p> 

      <h2 className="text2" >‚û™ Teste de Valores </h2>
      <p className="p2">
      typeOf =  vai testando o tipo de dado dentro do js<br />
      - testar o tipo de dado na vari√°vel<br />
      - s√≥ funciona com tipos primitivos. <br />
      {'(Mostra o tipo de dado.)'}
      </p> 

      <h2 className="text2" >‚û™ DOM </h2>
      <p className="p2">
      Document Object Model = TUDO que est√° no HTML.  
      </p> 

      <h2 className="text2" >‚û™ getElementById </h2>
      <p className="p2">
      Acessar uma div com a ID dela.<br />
      .innerHTML pega s√≥ o valor que tem na ID.  
      </p> 

      <h2 className="text2" >‚û™ getElementByClassName </h2>
      <p className="p2">
      Busca v√°rias classes e transforma em uma cole√ß√£o de HTML¬¥s = arrays.<br />
      Para pegar apenas uma classe, tem que mostrar qual a posi√ß√£o em que ela est√°.<br />
      A contagem come√ßa no 0 {'(zero)'}.
      Acessar seletores.
      </p> 

      <h2 className="text2" >‚û™ getElementByTagName </h2>
      <p className="p2">
      Acessar uma tag espec√≠fica do HTML.  
      </p> 

      <h2 className="text2" >‚û™ querySelector </h2>
      <p className="p2">
      Simplifica√ß√£o do getElementbyID, getElementByClassName e getElementByTagName.<br />
      N√£o faz o array.<br />
      Acessa um elemento s√≥, # id . class
      </p> 

      <h2 className="text2" >‚û™ querySelectorAll </h2>
      <p className="p2">
      Seleciona todos os elementos.<br />
      Array de leitura, apenas para acessar os elementos.
      </p> 

      <h2 className="text2" >‚û™ createElement </h2>
      <p className="p2">
      Item que √© capaz de criar um elemento atrav√©s da documenta√ß√£o.  
      </p> 

      <h2 className="text2" >‚û™ appendChild </h2>
      <p className="p2">
      Recurso em que inserimos um elemento dentro do outro.
      </p> 

      <h2 className="text2" >‚û™ removeChild </h2>
      <p className="p2">
      Remove um item do elemento.  
      </p> 

      <h2 className="text2" >‚û™ parentNode </h2>
      <p className="p2">
      Acessa o elemento pai de um determinado elemento acessado, sucessivamente.  
      </p> 

      <h2 className="text2" >‚û™ Vari√°veis Declar√°veis </h2>
      <p className="p2">
      Armazena valores/dados. <br />
      S√£o criadas antes do c√≥digo executado {'(global)'}.<br />
      Vari√°vaies "const" n√£o mudam. <br />
      N√£o podem ser chamadas pelas palavras reservadas.

      </p> 

      <h2 className="text2" >‚û™ Objetos </h2>
      <p className="p2">
      Tem √≠ndice e valor, inicia com {'{}'}, separa por v√≠rgula.  
      </p> 

      <h2 className="text2" >‚û™ Arrays/Vetores </h2>
      <p className="p2">
      Tem √≠ndices, come√ßa com {'[]'}, sempre √© contado a partir do 0.  
      </p> 

      <h2 className="text2" >‚û™ Loops </h2>
      <p className="p2">
      - For = adiciona coisas em mais de uma classe. Acessa um array, tanto HTML collection quanto array de verdade. Muda o HTML.<br />
      HTML collection != de array<br /> 
      HTML colletcion = array apenas com HTML<br />
      Array = pode ter qualquer valor<br />
      <br />
      - Foreach = recebe uma fun√ß√£o. Acessa um elemento index diretamente. S√≥ percorre prototype array.<br /> Tamb√©m da pra muda. <br /><br />
      - Map = s√≥ percorre arrays, parecido com o foreach. Altera diretamente o element.<br />
      Clone de dados com o map.<br /><br />
      - While = percorre enquanto a condi√ß√£o for true, e n√£o para se n√£o houver um break{'(limite definido'} <br />
      var de escopo global pode ser acessada no while.

      </p> 

      <h2 className="text2" >‚û™ Eventos </h2>
      <p className="p2">
      Eventos no JS s√£o "respostas" ao usu√°rio, quando o mesmo faz algo no HTML, o JS o responde com alguma a√ß√£o.<br />
      Um clique em bot√£o, por exemplo.  <br /><br /> 
      </p> 
      
      <p className="p1">
      <ul>
        <li>Onload</li>
        <li>Click</li>
        <li>Hover</li>
        <li>Change</li>
        <li>Blur</li>
        <li>Keyup</li>
        <li>Keypress</li>
        <li>Submit</li>
        <br /><br />
      </ul>
      </p>

      <p className="p2">
        - Onload = evento para quando a p√°gina for carregada, fun√ß√£o que pode executar qualquer coisa {'(pelo windown.onload)'}.<br />
        Ap√≥s o HTML carregar.<br /><br />

        - Click = evento ao clicar em algo. <br />
        add.EventListener{'()'}, √© uma fun√ß√£o com 2 {'(dois)'} par√¢metros, recebe um nome em string e uma a√ß√£o.<br /><br />

        - Hover = quando o mouse passa por cima de algo, n√£o h√° necessidade do click. <br />
        √â como se fosse o "depois" de algo.<br /><br />
        classList.add = adiciona classe no evento <br />
        * o atributo {'< this >'} d√° refer~encia ao elemento do escopo atual {'(fun√ß√£o)'}.
        <br />
        mouseover = mouse passa em cima.<br />
        mouseleave = mouse sai de cima.<br /><br />

        - Change = altera√ß√£o no elemento<br />
        feito pelo add.EventListener<br /><br />

        - Blur = toda vez que sair do elemento.<br />
        innerText = insere apenas texto no elemento.<br />
        innerHTML = insere qualquer coisa.<br /><br />

        - Keyup = evento na PRIMEIRA tecla no elemento.<br /><br />

        - Keypress = evento ao pressionar a primeira tecla.<br /><br />

        -Submit = "enviar". Toda vez que algo for enviado.<br /><br />
        Para prevenir o refresh da p√°gina = .preventDefault<br />
        Para verificar um campo vazio = .addEventListener
      </p>

      <h1 className="text2" >‚û™ jQuery </h1>
      <p className="p2">
      Biblioteca JS, para simplificar o JS nativo. <br />
      Segue a ideia da vanilha.<br />
      √â bom para usar em sites com muitos efeitos/transi√ß√µes  
      </p> 

      <h2 className="text2" >‚û™ Seletores </h2>
      <p className="p2">
      {'$'} = para selecionar id, class, etc.
      </p> 

      <h2 className="text2" >‚û™ Eventos </h2>
      <p className="p2">
      S√£o a√ß√µes realizadas pelo jQuery, igual ao JS normal.<br /><br />
      Com a fun√ß√£o "on", recebe dois par√£metros, nome e a√ß√£o/fun√ß√£o.
      </p> 

      <h2 className="text2" >‚û™ Delay </h2>
      <p className="p2">
      Simplificador para sign time out no jQuery.<br />
      Intervalo maior para emitir uma a√ß√£o/resposta.  
      </p> 

      <h2 className="text2" >‚û™ add class e remove class </h2>
      <p className="p2">
      addClass = adiciona uma a√ß√£o/fun√ß√£o como resposta de a√ß√£o do usu√°rio.<br />
      removeClass =  remove uma a√ß√£o/fun√ß√£o como resposta de a√ß√£o do usu√°rio.
      </p> 

      <h2 className="text2" >‚û™ Serialize e Serialize Array </h2>
      <p className="p2">
      Serializar os dados = informar quais s√£o as informa√ß√µes que ir√£o para o servidor.<br />
      <br />
      Serialize array = converte em objeto.  
      </p> 


    </div>
  );
}

export default ResumosJS;